{"version":3,"sources":["shared/context/auth-context.js","shared/components/UIElements/LoadingSpinner.js","shared/components/UIElements/Backdrop.js","shared/components/Navigation/MainHeader.js","shared/components/Navigation/NavLinks.js","shared/components/Navigation/SideDrawer.js","shared/components/Navigation/MainNavigation.js","App.js","shared/hooks/auth-hook.js","serviceWorker.js","index.js"],"names":["AuthContext","createContext","isLoggedIn","userId","token","login","logout","LoadingSpinner","props","className","asOverlay","Backdrop","ReactDOM","createPortal","onClick","document","getElementById","MainHeader","children","NavLinks","auth","useContext","to","exact","SideDrawer","content","CSSTransition","in","show","timeout","classNames","mountOnEnter","unmountOnExit","MainNavigation","useState","drawerIsOpen","setDrawerOpen","closeSideDrawerHandler","Fragment","Users","React","lazy","NewPlace","UserPlaces","UpdatePlace","Auth","App","routes","logoutTimer","setToken","expireToken","setExpireToken","setUserId","useCallback","uid","expirationDate","tokenExpirationDate","Date","getTime","localStorage","setItem","JSON","stringify","expiration","toISOString","userData","parse","getItem","removeItem","useEffect","remainingTime","setTimeout","clearTimeout","useAuth","path","Provider","value","fallback","Boolean","window","location","hostname","match","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qGAAA,6CAEaA,EAAcC,wBAAc,CACrCC,YAAY,EACZC,OAAQ,KACRC,MAAO,KACPC,MAAO,aACPC,OAAQ,gB,gCCPZ,0BAYeC,IARQ,SAAAC,GACrB,OACE,yBAAKC,UAAS,UAAKD,EAAME,WAAa,6BACpC,yBAAKD,UAAU,qB,gCCPrB,0CAYeE,IAPE,SAAAH,GACb,OAAOI,IAASC,aACZ,yBAAKJ,UAAU,WAAWK,QAASN,EAAMM,UACzCC,SAASC,eAAe,oB,gRCEjBC,G,YANI,SAAAT,GACf,OACI,4BAAQC,UAAU,eAAeD,EAAMU,Y,gBCchCC,EAdE,SAAAX,GACb,IAAMY,EAAOC,qBAAWrB,KAExB,OACI,wBAAIS,UAAU,aACV,4BAAI,kBAAC,IAAD,CAASa,GAAG,IAAIC,OAAK,GAArB,cACHH,EAAKlB,YAAc,4BAAI,kBAAC,IAAD,CAASoB,GAAE,WAAMF,EAAKjB,OAAX,YAAX,cACvBiB,EAAKlB,YAAc,4BAAI,kBAAC,IAAD,CAASoB,GAAG,cAAZ,cACvBF,EAAKlB,YAAc,wBAAIY,QAASM,EAAKd,QAAQ,kBAAC,IAAD,CAASgB,GAAG,SAAZ,YAC5CF,EAAKlB,YAAc,4BAAI,kBAAC,IAAD,CAASoB,GAAG,SAAZ,mB,QCOtBE,G,MAhBI,SAAAhB,GACf,IAAMiB,EACF,kBAACC,EAAA,EAAD,CACIC,GAAInB,EAAMoB,KACVC,QAAS,IACTC,WAAW,gBACXC,cAAY,EACZC,eAAa,GAEb,2BAAOvB,UAAU,cAAcK,QAASN,EAAMM,SAAUN,EAAMU,WAItE,OAAON,IAASC,aAAaY,EAASV,SAASC,eAAe,kB,QC0BnDiB,EApCQ,SAAAzB,GAAU,IAAD,EACU0B,oBAAS,GADnB,mBACrBC,EADqB,KACPC,EADO,KAOtBC,EAAyB,WAC3BD,GAAc,IAGlB,OACI,kBAAC,IAAME,SAAP,KACKH,GAAgB,kBAACxB,EAAA,EAAD,CAAUG,QAASuB,IACpC,kBAAC,EAAD,CAAYT,KAAMO,EAAcrB,QAASuB,GACrC,yBAAK5B,UAAU,+BACX,kBAAC,EAAD,QAGR,kBAAC,EAAD,KACI,4BAAQA,UAAU,4BAA4BK,QAjB5B,WAC1BsB,GAAc,KAiBF,+BACA,+BACA,gCAEJ,wBAAI3B,UAAU,0BACV,kBAAC,IAAD,CAAMa,GAAG,KAAT,gBAEJ,yBAAKb,UAAU,+BACX,kBAAC,EAAD,U,QCzBd8B,EAAQC,IAAMC,MAAK,kBAAM,sDACzBC,EAAWF,IAAMC,MAAK,kBAAM,sDAC5BE,EAAaH,IAAMC,MAAK,kBAAM,sDAC9BG,EAAcJ,IAAMC,MAAK,kBAAM,sDAC/BI,EAAOL,IAAMC,MAAK,kBAAM,sDAkEfK,EAhEH,WAAO,IAIbC,EAJY,ECjBK,WAAO,IAKtBC,EALqB,EACEd,oBAAS,GADX,mBAClB9B,EADkB,KACV6C,EADU,OAEaf,qBAFb,mBAElBgB,EAFkB,KAELC,EAFK,OAGGjB,mBAAS,MAHZ,mBAGlB/B,EAHkB,KAGViD,EAHU,KAOnB/C,EAAQgD,uBAAY,SAACC,EAAKlD,EAAOmD,GACrCN,EAAS7C,GACTgD,EAAUE,GACV,IAAME,EAAsBD,GACL,IAAIE,MACjB,IAAIA,MAAOC,UAAa,MAGlCP,EAAeK,GACfG,aAAaC,QACX,WACAC,KAAKC,UAAU,CAAE3D,OAAQmD,EAAKlD,MAAOA,EAAO2D,WAAYP,EAAoBQ,mBAE7E,IAEG1D,EAAS+C,uBAAY,WACzBJ,EAAS,MACTG,EAAU,MACVD,EAAe,MACf,IAAIc,EAAWJ,KAAKK,MAClBP,aAAaQ,QAAQ,aAEpBF,GAAYA,EAAS7D,OACtBuD,aAAaS,WAAW,cAEzB,IAyBH,OAvBAC,qBAAU,WACR,GAAGjE,GAAS8C,EAAa,CACvB,IAAMoB,EAAgBpB,EAAYQ,WAAY,IAAID,MAAOC,UACzDV,EAAcuB,WAAWjE,EAAQgE,QAEjCE,aAAaxB,KAEd,CAAC1C,EAAQ4C,EAAaF,IAEzBqB,qBAAU,WACR,IAAIJ,EAAWJ,KAAKK,MAClBP,aAAaQ,QAAQ,aAEvB,GACEF,GACAA,EAAS7D,OACT,IAAIqD,KAAKQ,EAASF,YAAc,IAAIN,KACpC,CAAC,IACOtD,EAA8B8D,EAA9B9D,OAAQC,EAAsB6D,EAAtB7D,MAAQ2D,EAAcE,EAAdF,WACxB1D,EAAMF,EAAQC,EAAO2D,MAEtB,CAAC1D,IAEG,CAAED,QAAOC,QAAOC,SAAQH,UDtCQsE,GAAjCrE,EAFQ,EAERA,MAAOC,EAFC,EAEDA,MAAOC,EAFN,EAEMA,OAAQH,EAFd,EAEcA,OAoC9B,OA/BE4C,EADC3C,EAEC,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOsE,KAAK,IAAInD,OAAK,GACnB,kBAACgB,EAAD,OAEF,kBAAC,IAAD,CAAOmC,KAAK,kBAAkBnD,OAAK,GACjC,kBAACoB,EAAD,OAEF,kBAAC,IAAD,CAAO+B,KAAK,aAAanD,OAAK,GAC5B,kBAACmB,EAAD,OAEF,kBAAC,IAAD,CAAOgC,KAAK,oBACV,kBAAC9B,EAAD,OAEF,kBAAC,IAAD,CAAUtB,GAAG,OAKf,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOoD,KAAK,IAAInD,OAAK,GACnB,kBAACgB,EAAD,OAEF,kBAAC,IAAD,CAAOmC,KAAK,SACV,kBAAC7B,EAAD,OAEF,kBAAC,IAAD,CAAUvB,GAAG,OAMjB,kBAAC,IAAYqD,SAAb,CACEC,MAAO,CACL1E,aAAcE,EACdA,MAAOA,EACPD,OAAQA,EACRE,MAAOA,EACPC,OAAQA,IAGV,kBAAC,IAAD,KACE,kBAAC,EAAD,MACA,8BACE,kBAAC,WAAD,CAAUuE,SACR,yBAAKpE,UAAU,UACb,kBAACF,EAAA,EAAD,QAGDwC,OE/DO+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNtE,IAASuE,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFrE,SAASC,eAAe,SDyHpB,kBAAmBqE,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c7c504d9.chunk.js","sourcesContent":["import { createContext } from 'react';\n\nexport const AuthContext = createContext({\n    isLoggedIn: false,\n    userId: null,\n    token: null,\n    login: () => { },\n    logout: () => { }\n});","import React from 'react';\n\nimport './LoadingSpinner.css';\n\nconst LoadingSpinner = props => {\n  return (\n    <div className={`${props.asOverlay && 'loading-spinner__overlay'}`}>\n      <div className=\"lds-dual-ring\"></div>\n    </div>\n  );\n};\n\nexport default LoadingSpinner;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './Backdrop.css';\n\nconst Backdrop = props => {\n    return ReactDOM.createPortal(\n        <div className=\"backdrop\" onClick={props.onClick}></div>,\n        document.getElementById('backdrop-hook')\n    );\n};\n\nexport default Backdrop;","import React from 'react';\n\nimport './MainHeader.css';\n\nconst MainHeader = props => {\n    return (\n        <header className=\"main-header\">{props.children}</header>\n    );\n};\n\nexport default MainHeader;","import React, { useContext } from 'react';\nimport { NavLink } from 'react-router-dom';\n\nimport './NavLinks.css';\nimport { AuthContext } from '../../context/auth-context';\n\nconst NavLinks = props => {\n    const auth = useContext(AuthContext);\n    \n    return (\n        <ul className=\"nav-links\">\n            <li><NavLink to=\"/\" exact>ALL USERS</NavLink></li>\n            {auth.isLoggedIn && <li><NavLink to={`/${auth.userId}/places`}>MY PLACES</NavLink></li>}\n            {auth.isLoggedIn && <li><NavLink to=\"/place/new\">ADD PLACE</NavLink></li>}\n            {auth.isLoggedIn && <li onClick={auth.logout}><NavLink to=\"/auth\">LOGOUT</NavLink></li>}\n            {!auth.isLoggedIn && <li><NavLink to=\"/auth\">AUTHENTICATE</NavLink></li>}\n        </ul>\n    );\n};\n\nexport default NavLinks;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { CSSTransition } from 'react-transition-group';\n\nimport './SideDrawer.css';\n\nconst SideDrawer = props => {\n    const content = (\n        <CSSTransition \n            in={props.show} \n            timeout={200} \n            classNames=\"slide-in-left\" \n            mountOnEnter \n            unmountOnExit\n        >\n            <aside className=\"side-drawer\" onClick={props.onClick}>{props.children}</aside>\n        </CSSTransition>\n    );\n\n    return ReactDOM.createPortal(content, document.getElementById('side-drawer'));\n};\n\nexport default SideDrawer;","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport './MainNavigation.css';\nimport MainHeader from './MainHeader';\nimport NavLinks from './NavLinks';\nimport SideDrawer from './SideDrawer';\nimport Backdrop from '../UIElements/Backdrop';\n\nconst MainNavigation = props => {\n    const [drawerIsOpen, setDrawerOpen] = useState(false);\n\n    const openSideDrawerHandler = () => {\n        setDrawerOpen(true);\n    };\n\n    const closeSideDrawerHandler = () => {\n        setDrawerOpen(false);\n    };\n\n    return (\n        <React.Fragment>\n            {drawerIsOpen && <Backdrop onClick={closeSideDrawerHandler}/>}\n            <SideDrawer show={drawerIsOpen} onClick={closeSideDrawerHandler}>\n                <nav className=\"main-navigation__drawer-nav\">\n                    <NavLinks />\n                </nav>\n            </SideDrawer> \n            <MainHeader>\n                <button className=\"main-navigation__menu-btn\" onClick={openSideDrawerHandler}>\n                    <span />\n                    <span />\n                    <span />\n                </button>\n                <h1 className=\"main-navigation__title\">\n                    <Link to=\"/\">Your Places</Link>\n                </h1>\n                <nav className=\"main-navigation__header-nav\">\n                    <NavLinks />\n                </nav>\n            </MainHeader>\n        </React.Fragment>\n    );\n};\n\nexport default MainNavigation;","import React, { Suspense } from 'react';\nimport { BrowserRouter as Router, Route, Redirect, Switch } from 'react-router-dom';\n\n// import Users from './users/pages/Users';\n// import NewPlace from './places/pages/NewPlace';\n// import UserPlaces from './places/pages/UserPlaces';\n// import UpdatePlace from './places/pages/UpdatePlace';\n// import Auth from './users/pages/Auth';\nimport MainNavigation from './shared/components/Navigation/MainNavigation';\nimport { AuthContext } from './shared/context/auth-context';\nimport { useAuth } from \"./shared/hooks/auth-hook\"; \nimport LoadingSpinner from './shared/components/UIElements/LoadingSpinner';\n\nconst Users = React.lazy(() => import('./users/pages/Users'));\nconst NewPlace = React.lazy(() => import('./places/pages/NewPlace'));\nconst UserPlaces = React.lazy(() => import('./places/pages/UserPlaces'));\nconst UpdatePlace = React.lazy(() => import('./places/pages/UpdatePlace'));\nconst Auth = React.lazy(() => import('./users/pages/Auth'));\n\nconst App = () => {\n\n  const { token, login, logout, userId } = useAuth();\n\n  let routes;\n\n  if(token) {\n    routes = (\n      <Switch>\n        <Route path=\"/\" exact>\n          <Users />\n        </Route>\n        <Route path=\"/:userId/places\" exact>\n          <UserPlaces />\n        </Route>\n        <Route path=\"/place/new\" exact>\n          <NewPlace />\n        </Route>\n        <Route path=\"/places/:placeId\">\n          <UpdatePlace />\n        </Route>\n        <Redirect to=\"/\" />\n      </Switch>\n    );\n  } else {\n    routes = (\n      <Switch>\n        <Route path=\"/\" exact>\n          <Users />\n        </Route>\n        <Route path=\"/auth\">\n          <Auth />\n        </Route>\n        <Redirect to=\"/\" />\n      </Switch>\n    );\n  }\n\n  return (\n    <AuthContext.Provider \n      value={{ \n        isLoggedIn: !!token,\n        token: token, \n        userId: userId,\n        login: login, \n        logout: logout \n      }}\n    >\n      <Router>\n        <MainNavigation />\n        <main>\n          <Suspense fallback={\n            <div className=\"center\">\n              <LoadingSpinner />\n            </div>\n          }>\n            {routes}\n          </Suspense>\n        </main>\n      </Router>\n    </AuthContext.Provider>\n  );\n}\n\nexport default App;\n","import { useCallback, useState, useEffect } from \"react\";\n\nexport const useAuth = () => {\n    const [token , setToken] = useState(false);\n    const [expireToken, setExpireToken] = useState();\n    const [userId, setUserId] = useState(null);\n  \n    let logoutTimer;\n  \n    const login = useCallback((uid, token, expirationDate) => {\n      setToken(token);\n      setUserId(uid);\n      const tokenExpirationDate = expirationDate ? \n            expirationDate : new Date(\n                new Date().getTime() + (1000 * 60) * 60\n            );\n            \n      setExpireToken(tokenExpirationDate);\n      localStorage.setItem(\n        'userData',\n        JSON.stringify({ userId: uid, token: token, expiration: tokenExpirationDate.toISOString() })\n      );\n    }, []);\n  \n    const logout = useCallback(() => {\n      setToken(null);\n      setUserId(null);\n      setExpireToken(null);\n      let userData = JSON.parse(\n        localStorage.getItem(\"userData\")\n      );\n      if(userData && userData.token) {\n        localStorage.removeItem(\"userData\");\n      }\n    }, []);\n  \n    useEffect(() => {\n      if(token && expireToken) {\n        const remainingTime = expireToken.getTime() - new Date().getTime();\n        logoutTimer = setTimeout(logout, remainingTime);\n      } else {\n        clearTimeout(logoutTimer);\n      }\n    }, [logout, expireToken, logoutTimer]);\n  \n    useEffect(() => {\n      let userData = JSON.parse(\n        localStorage.getItem(\"userData\")\n      );\n      if(\n        userData && \n        userData.token && \n        new Date(userData.expiration) > new Date()\n      ) {\n        const { userId, token , expiration} = userData;\n        login(userId, token, expiration);\n      }\n    }, [login]);\n  \n    return { token, login, logout, userId };\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}